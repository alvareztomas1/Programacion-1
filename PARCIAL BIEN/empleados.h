typedef struct
{
    int dia, mes, anio;

}eFecha;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
    int legajo;
    char apellido[31];
    char nombre [31];
    char sexo;
    char telefono[16];
    char eMail[31];
    eFecha fechaDeIngreso;
    int itsEmpty;

}eSocio;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
    int idAutor;
    char apellido[31];
    char nombre[31];
    int itsEmpty;

}eAutor;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
    int idLibro;
    char titulo[51];
    int idAutor;
    int itsEmpty;

}eLibros;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
    int idPrestamo;
    int idLibro;
    int legajoEmpleado;
    eFecha fechaDePrestamo;
    int itsEmpty;

}ePrestamo;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int menu();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief Recorre todo el array de estructura eSocio y le da valor 1 al campo itsEmpty
 *
 * \param  soc Array de estructura a recorrer
 * \param  tamSoc El tamaño de la estructura recorrida
 * \return  Void
 *
 */
void inicializarEmpleados (eSocio soc[], int tamSoc);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief Recorre todo el array de estructura eLibros y le da valor 1 al campo itsEmpty
 *
 * \param  lib Array de estructura a recorrer
 * \param  tamLib El tamaño de la estructura recorrida
 * \return  Void
 *
 */
void inicializarLibros (eLibros lib[], int tamLib);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief Recorre todo el array de estructura eAutor y le da valor 1 al campo itsEmpty
 *
 * \param  aut Array de estructura a recorrer
 * \param  tamAut El tamaño de la estructura recorrida
 * \return  Void
 *
 */
void inicializarAutores (eAutor aut[], int tamAut);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief Inicializa los valores de los campos de las estructuras
 *
 * \param  soc Estructura socios a la que se le cargan valores
 * \param  tamSoc Tamaño de la estructura soc
 * \param  lib Estructura libros a la que se le cargan valores
 * \param  tamSec Tamaño de la estructura sec
 * \param  pres Estructura prestamos a la que se le cargan valores
 * \param  tamPres Tamaño de la estructura pres
 * \return void
 *
 */
void hardcode (eSocio soc[], int tamSoc, eAutor aut[], int tamAut, eLibros lib[], int tamLib, ePrestamo pres[], int tamPres);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief Busca el campo legajo de un empleado
 *
 * \param
 * \param
 * \return El indice del legajo.
 *
 */
int buscarLegajo (eSocio soc[], int tamSoc, int legajo);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int buscarLibre (eSocio soc[], int tamSoc);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void altaSocio (eSocio soc[], int tamSoc, int contador);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarSocio (eSocio soc);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarSocios (eSocio soc[], int tamSoc);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarLibro(eLibros lib);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarLibros (eLibros lib[], int tamLib);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarAutor (eAutor aut);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarAutores (eAutor aut[], int tamAut);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void bajaSocio (eSocio soc[], int tamSoc);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void copiarAutor (char nombreAutor[], int id, eAutor aut[], int tamAut);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ordenarSocios (eSocio soc[], int tamSoc);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ordenarAutores (eAutor aut[], int tamAut);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ordenarLibros(eLibros lib[], int tamLib);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void modificarSocio (eSocio soc[], int tamSoc);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void inicializarPrestamo(ePrestamo pres[], int tamPres);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int buscarPrestamoLibre (ePrestamo pres[], int tamPres);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void altaPrestamo (ePrestamo pres[], int tamPres, eSocio soc[], int tamSoc, eLibros lib[], int tamLib, int contador);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarPrestamo (eSocio soc[], int tamSoc, eLibros lib[],int tamLib, ePrestamo pres[], int tamPres);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void informarPrestamosDeLibro (eSocio soc[], int tamSoc, eLibros lib[],int tamLib, ePrestamo pres[], int tamPres);

