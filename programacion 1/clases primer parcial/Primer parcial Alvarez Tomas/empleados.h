typedef struct
{
    int dia, mes, anio;

}eFecha;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
    int legajo;
    char apellido[51];
    char nombre [51];
    char sexo;
    float sueldo;
    eFecha fechaDeIngreso;
    int idSector;
    int itsEmpty;

}eEmpleados;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
    int id;
    char desc[51];
}eSectores;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
    int idMenu;
    char desc[51];
    int precio;

}eMenus;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct
{
    int idAlmuerzo;
    int idMenu;
    int legajoEmpleado;
    eFecha fechaDeAlmuerzo;
    int itsEmpty;

}eAlmuerzo;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int menu();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief Recorre todo el array de estructura eEmpleados y le da valor 1 al campo itsEmpty
 *
 * \param  emp Array de estructura a recorrer
 * \param  tamEmp El tamaño de la estructura recorrida
 * \return  Void
 *
 */
void inicializarEmpleados (eEmpleados emp[], int tamEmp);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief Inicializa los valores de los campos de las estructuras
 *
 * \param  emp Estructura empleados a la que se le cargan valores
 * \param  tamEmp Tamaño de la estructura emp
 * \param  sec Estructura sectores a la que se le cargan valores
 * \param  tamSeco Tamaño de la estructura sec
 * \param  men Estructura menus a la que se le cargan valores
 * \param  tamMen Tamaño de la estructura men
 * \return void
 *
 */
void hardcode (eEmpleados emp[], int tamEmp, eSectores sec[], int tamSec, eMenus men[], int tamMen, eAlmuerzo alm[], int tamAlm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief Busca el campo legajo de un empleado
 *
 * \param
 * \param
 * \return El indice del legajo.
 *
 */
int buscarLegajo (eEmpleados emp[], int tamEmp, int legajo);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int buscarLibre (eEmpleados emp[], int tamEmp);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void altaEmpleado (eEmpleados emp[], int tamEmp, eSectores sec[], int tamSec, int contador);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarEmpleados (eEmpleados emp[], int tamEmp, eSectores sec[], int tamSec);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void bajaEmpleado (eEmpleados emp[], int tamEmp);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarEmpleado (eEmpleados emp, eSectores sec[], int tamSec);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void copiarSector (char nombreSector[], int id, eSectores sec[], int tamSec);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ordenarEmpleados (eEmpleados emp[], int tamEmp);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void modificarEmpleado (eEmpleados emp[], int tamEmp, eSectores sec[], int tamSec);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void inicializarAlmuerzos(eAlmuerzo alm[], int tamAlm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int buscarAlmuerzoLibre (eAlmuerzo alm[], int tamAlm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void altaAlmuerzo (eAlmuerzo alm[], int tamAlm, eEmpleados emp[], int tamEmp, eMenus men[],int tamMen, int contador);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarAlmuerzo (eEmpleados emp[], int tamEmp, eMenus men[],int tamMen, eAlmuerzo alm[], int tamAlm);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarEmpleadosPorSector (eEmpleados emp[], int tamEmp, eSectores sec[], int tamSec);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarCantidadEmpleadosPorSector (eEmpleados emp[], int tamEmp, eSectores sec[], int tamSec);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarCantidadEmpleadosPorSector (eEmpleados emp[], int tamEmp, eSectores sec[], int tamSec);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mostrarSectorConMasEmpleados (eEmpleados emp[], int tamEmp, eSectores sec[], int tamSec);
